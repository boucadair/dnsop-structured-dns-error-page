<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std" docName="draft-wing-dnsop-structured-dns-error-page-01"
     ipr="trust200902" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" symRefs="true" sortRefs="true" version="3" consensus="true">
  <!-- xml2rfc v2v3 conversion 3.9.1 -->
  <front>
    <title abbrev="Structured DNS Access Denied Error Page">Structured Data for DNS
    Access Denied Error Page</title>
    <seriesInfo name="Internet-Draft" value="draft-wing-dnsop-structured-dns-error-page-01"/>
    <author fullname="Dan Wing" initials="D." surname="Wing">
      <organization abbrev="Citrix">Citrix Systems, Inc.</organization>
      <address>
        <postal>
          <street/>
          <country>United States of America</country>
        </postal>
        <email>dwing-ietf@fuggles.com</email>
      </address>
    </author>
    <author fullname="Tirumaleswar Reddy" initials="T." surname="Reddy">
      <organization abbrev="McAfee">McAfee, Inc.</organization>
      <address>
        <postal>
          <street>Embassy Golf Link Business Park</street>
          <city>Bangalore</city>
          <region>Karnataka</region>
          <code>560071</code>
          <country>India</country>
        </postal>
        <email>kondtir@gmail.com</email>
      </address>
    </author>
    <author fullname="Neil Cook" initials="N." surname="Cook">
      <organization>Open-Xchange</organization>
      <address>
        <postal>
          <street/>
          <country>United Kingdom</country>
        </postal>
        <email>neil.cook@noware.co.uk</email>
      </address>
    </author>
    <author fullname="Mohamed Boucadair" initials="M." surname="Boucadair">
      <organization>Orange</organization>
      <address>
        <postal>
          <street/>
          <city>Rennes</city>
          <region/>
          <code>35000</code>
          <country>France</country>
        </postal>
        <email>mohamed.boucadair@orange.com</email>
      </address>
    </author>
    <date/>
    <workgroup>DNSOP WG</workgroup>
    <abstract>
      <t>DNS filtering is widely deployed for network security, but
      filtered DNS responses lack information for the end user to
      understand the reason for the filtering.  Existing mechanisms
      to provide detail to end users cause harm especially if the
      blocked DNS response is to an HTTPS website.</t>

      <t>This document defines a mechanism to explain the reason
      for the DNS filtering and offer an HTTPS URIs to get more
      detail.  This information can be parsed by the client and
      displayed, logged, or other purposes.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" numbered="true" toc="default">
      <name>Introduction</name>

<t>DNS filters are deployed for a variety of reasons including
endpoint security, parental filtering, and filtering required by law
enforcement.  Network-based security solutions such as firewalls and
Intrusion Prevention Systems (IPS) rely upon network traffic
inspection to implement perimeter-based security policies and operate
by filtering DNS responses.  In a home, DNS filtering is used for the
same reasons as above and additionally for parental control.  Internet
Service Providers typically block access to some DNS domains due to a
requirement imposed by an external entity (e.g., law enforcement
agency) also performed using DNS-based content filtering.</t>


   <t>Users of DNS services which perform filtering may wish to
   receive more information about such filtering to resolve problems
   with the filter -- for example to contact the administrator to
   whitelist a domain that was erroneously filtered or to understand
   the reason a particular domain was filtered.  With that information,
   the user can choose another network, open a trouble ticket with
   the DNS administrator to resolve erroneous filtering, log the
   information, or other uses.</t>

      <t>Two DNS filtering mechanisms are widely deployed today but are
      harmful:</t>

	 <dl newline="false" spacing="normal">
	    <dt>empty answer or NXDOMAIN:</dt>
	    <dd>The simplest mechanism is simply returning an empty
	    answer or NXDOMAIN.  This provides no information to the
	    client and makes the network or its DNS feel broken
	    because of the 'host not found' error messages typically
	    presented to the user.  This mechanism also interferes
	    with client DNSSEC-validating DNS resolvers because the
	    empty answer has an invalid (or missing) signature.</dd>
      
      <dt>Forged response:</dt>
      <dd>This mechanism returns a forged A (or AAAA) response
      pointing at a host operated by the DNS operator.  The
      expectation is the user's browser will visit the server over
      HTTP and a suitable explanation will be displayed to the user.
      As HTTPS is now commonplace, this expectaion breaks down because
      clients are presented with a warning about visiting an
      un-trusted site (because of an un-trusted certificate), or those
      users are encouraged to install the certificate as an additional
      trusted root, eroding their security for all TLS connections.
      Furthermore, for the user to see the DNS filtering explanation
      the user needs a web browser which visits the server and often
      require JavaScript, creating a wider attack surface.  The
      requirement for a web browser is, itself, a problem on some
      devices (e.g., IoT or headless devices).  Finally, this mechanism
      interferes with client DNSSEC-validating DNS resolvers because
      the forged response has an invalid (or missing) signature.</dd>

      </dl>

      <t>For both DNS filtering mechanisms described above, the DNS server can
      return extended error codes Blocked, Censored, Filtered, or Forged
      Answer defined
      in <xref target="RFC8914">Section 4 of</xref>, which that document
      states MUST be sent over Encrypted DNS channel.  However, these codes
      only explain that filtering occurred but lacks detail for the user
      to resolve the filtering.</t>
            
       
   <t>This document describes a protocol
   containing parsable data in a new <xref target="RFC6891"
   format="default">EDNS(0)</xref> option code.</t>

      
      <t>Clients indicate their support of this specification in their
      DNS query so the DNS server can tailor its DNS response
      accordingly.  The information returned in a DNS response allows
      combinations of headless devices (i.e., those lacking a display
      or other means to communicate with a human), operating systems,
      and web browsers to be informed of the filtering.  This
      information returned can be logged and/or displayed to the user,
      as appropriate for the user interface capabilities of the client
      hardware and software.</t>
      
    </section>
    <section anchor="notation" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in BCP 14
      <xref target="RFC2119" format="default"/><xref target="RFC8174" format="default"/> when, and
      only when, they appear in all capitals, as shown here.</t>

      <t>This document uses terms defined in <xref target="RFC8499" format="default">DNS Terminology</xref>.</t>

      <t>"Requestor" refers to the side that sends a request.
      "Responder" refers to an authoritative, recursive resolver or
      other DNS component that responds to questions.  Other
      terminology is used here as defined in the RFCs cited by this
      document.</t>

      <t>"Encrypted DNS" refers to any encrypted scheme to convey DNS
      messages, for example, DNS-over-HTTPS <xref target="RFC8484"
      format="default"/>, DNS-over-TLS <xref target="RFC7858"
      format="default"/>, or DNS-over-QUIC <xref
      target="I-D.ietf-dprive-dnsoquic" format="default"/>.</t>

    </section>

    <section anchor="format-sec" title="Structured Error EDNS(0) Option Code">
      <t>This document defines a new EDNS(0) <xref
      target="RFC6891"></xref> option code (OPT) to include JSON
      providing information in the DNS response describing filtering
      that occurred for this query, defined in <xref
      target="format"></xref>.</t>

      <figure align="center" anchor="format"
              title="Structured Error EDNS(0) Option Code">
        <artwork align="center"><![CDATA[                                             1   1   1   1   1   1
     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   |           STRUCTURED-ERROR-LENGTH (fixed, two octets)         |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   /              STRUCTURED-ERROR-JSON (variable size)            /                                                                                           
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork>
      </figure>


      <t>The description of the fields is as follows:</t>


	 <dl newline="false" spacing="normal">
          <dt>STRUCTURED-ERROR-LENGTH:</dt>
	  <dd>Two octets containing the length of
	  STRUCTURED-ERROR-JSON, in octets.  It MUST NOT be set to
	  0.</dd>
          <dt>STRUCTURED-ERROR-JSON:</dt>
	  <dd>JSON containing DNS filtering information encoded in
	  JSON, defined in <xref target="json"/>.</dd>
        </dl>
    </section> 
    
    
<section anchor="json" numbered="true" toc="default">
  <name>Structured JSON</name>
      
      <t>STRUCTURED-ERROR-JSON has one top-level name, "p" (party responsible),
      containing an array of dictionaries for each party responsible
      for filtering this particular DNS response.  An array of responsible parties
      are possible in deployment scenarios where two or more entities
      are involved in a DNS filtering (the filtering may be for the
      same or distinct reasons by each involved DNS filter
      service). The content of the "p" array is structured as
      follows:</t>
      <dl newline="false" spacing="normal">
        <dt>c: (complaint)</dt>
        <dd>a partial HTTPS URI for the user to report
          mis-classified DNS filtering.  This field is mandatory and MUST
          contain a URI.  The endpoint adds a query parameter
	  to this URI, described below.  There are constraints on this URI
	  described in Security Considerations. This field might or might
	  not already contain an HTTP query parameter. This field is required.</dd>
        <dt>j: (justification)</dt>
        <dd>the textual justification for
          this particular DNS filtering. This field is optional.</dd>
        <dt>o: (organization)</dt>
        <dd>human-friendly name of the organization
          that filtered this particular DNS query. This field is optional.</dd>
        <dt>r: (regulation)</dt>
        <dd>a partial HTTPS URI to retrieve the public or private regulation for
	the filter.  This might point at an employment
          agreement (for an enterprise performing filtering) or a national
          government regulation (for an ISP performing filtering). To this
	  URI, the endpoint adds a query parameter, described below.  There
	  are constraints on this URI described in Security Considerations.
	  This field might or might not already contain an HTTP query parameter.
	  This field is optional.</dd>
      </dl>

      <t>To reduce the size of the JSON, two of the JSON fields, "c"
      and r", contain partial URIs when sent over the wire.  The
      client endpoint adds a query parameter to both of those URIs
      containing the DNS query class (class=), resource record type
      (type=), and name (name=), which are all contained in the DNS
      response.  With that addition, the URIs are considered
      fully-formed.</t>

      <aside><t>Discussion: Can Class=IN be assumed, or should it be part
      of the fully-formed URI?</t></aside>

      <t>To avoid the overhead associated with DNS trunction, the generated JSON
      SHOULD be as short as possible utilizing short domain names, concise text,
      and minified JSON.</t>

      <t>The JSON data can be parsed to display to the user, logged, or otherwise used
      to assist the end-user or IT staff with troubleshooting and diagnosing
      the cause of the DNS filtering.</t>

      <aside><t>Discussion: We might consider compressing the JSON.  Using the
      example below, minified JSON is 171 bytes, binary output from
      brotli is 108 bytes (36% reduction), gzip is 148 bytes (13% reduction),
      and base64-encoded brotli is 145 bytes (15% reduction).  
      <xref target="RFC3363"/> discusses problems with binary labels.</t>      
      </aside>

    </section>


    <section anchor="operation" numbered="true" toc="default">
      <name>Protocol Operation</name>
      <section>
	<name>Requestor Operation</name>
	
      <t>When generating a DNS query, the client MUST include the Structured Error
      EDNS(0) option so the DNS server knows the client is compliant with this
      specification.</t>

      </section>


      <section>
	<name>Responder Operation</name>
      <t>When the DNS server filters its DNS response to an A or AAAA
      record query, the DNS response MAY contain an empty answer,
      NXDOMAIN, or a forged A or AAAA response, as desired by the DNS
      server.  In addition, if the query contained the Structured Error
      EDNS(0) option, the DNS server MAY return more detail in the STRUCTURED-ERROR-JSON,
      as described below.</t>


      <t>Over time a domain name might be filtered, then not filtered,
      then filtered again.  Addtionally, the user might take minutes
      or even days before investigating a filtered DNS query.  Thus
      the URI is RECOMMENDED to include sufficient detail to determine
      the filtering state when the DNS filtering occurred.  If and how this is
      encoded into the URI is an implementation decision.</t>

      
            <aside><t>Discussion: the text in the justification field ("j")
      may not be in the user's preferred language.  Sending a <xref
      target="RFC5646">language tag</xref> in the OPT-DATA (<xref
      target="RFC6891">Section 6.1.2 of </xref>) would resolve this
      problem.  This has privacy implications.</t>
	    </aside>

      </section>


    </section>









    <section numbered="true" toc="default">
      <name>Example</name>
      <t>The example uses the folding defined in <xref target="RFC8792" format="default"/> for long lines.</t>
      <t>An example showing example.net that has filtered a DNS
      "A" record query for example.org is shown in <xref target="ex1" format="default"/>, below.</t>
      <figure anchor="ex1">
        <name>Example of JSON returned in EDNS(0) Structured Error response</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[  {
    "c": "https://mistakes.example.net?time=1621902483",
    "j": "malware present for 23 days",
    "o": "example.net Filtering Service",
    "r": "https://laws.example.net?country=atlantis"
  }]]></artwork>
      </figure>

      <t>Upon receipt, the two partial URIs ("c" and "r") are extended
      to become fully-formed URIs.  The class, type, and name are
      pulled from the DNS response (which matches the associated
      query) so that the fully-formed "c" URI becomes
      https://mistakes.example.net?time=1621902483&amp;class=in&amp;type=a&amp;name=example.org
      and the "r" URI becomes
      https://laws.example.net?country=atlantis&amp;class=in&amp;type=a&amp;name=example.org.</t>
      
    </section>
    

    <section anchor="Security" numbered="true" toc="default">
      <name>Security Considerations</name>

      <t>Security considerations in Section 6 of <xref
      target="RFC8914"></xref> and <xref target="RFC8624"></xref> need to be
      taken into consideration.</t>

      <t>The "c" and "r" URIs returned in the DNS response may cause
      HTTPS retrieval by the client, or by another party (e.g., IT staff).    
      To reduce attack surface, the Structed Error EDNS(0) option MUST only
      be processed by the client if the DNS query and response were both
      sent over an encrypted DNS channel to a DNS server authorized by
      the client; otherwise it MUST be ignored.</t>


      <t>The "c" and "r" URIs returned in the DNS response MUST match the
domain name of the encrypted DNS server.  This validation ensures both
the encrypted DNS server and the HTTPS server are operated by the same
entity.  This matching is performed by allowing the left-most FQDN label
to differ, but the other labels MUST match.  For example, ns.example.com
and web.example.com would match, whereas ns.com and web.com would not match.</t>
<aside><t>The example in the last sentence, above, doesn't work.  Do we need
to point at Mozilla's domain name list?  Seems so...</t></aside>

<t>If the web server responding to "c" or "r" URIs web server desires, it can HTTP redirect the request
elsewhere,such as might be common for "r" to point the user at a government-owned
domain explaining government-mandated filtering.  To improve privacy
of such redirection, unnecessary query parameters MUST be stripped by the
HTTP server from the HTTP target URL.</t>




      <t>Because this specification still allows DNS filtering to
      respond with an empty answer, NXDOMAIN, or forged answer (as the
      DNS server sees fit), this specification remains incompatible
      with client-based DNSSEC validation.  However, it is possible to
      maintain compatibility with DNSSEC by returnin the real (unfiltered)
      answer with its DNSSEC signature intact.  By also returning the
      EDNS(0) Structured Error, the DNS requestor can be informed of
      the filtering (from the DNS responder).  Depending on the threat
      model, network- and/or host-based IP filters or alerts can ensure
      the DNS requestor does not use the DNS response.</t>
      
      
      

<!--
      <t>The client knows it is connecting to a HTTPS server returning the
      error page. To reduce threat surface the client can retrieve the Error
      Page URL using, for example, an isolated environment and take other
      precautions such as clearly labeling the page as untrusted or prevent
      user interaction with the page. Such isolation should prevent
      transmitting cookies, block JavaScript, block auto-fill of credentials
      or personal information, and be isolated from the user's normal
      environment.</t>

      <t>Browsers perform some of the above restrictions when accessing
      captive portals (Section 5 of <xref target="RFC8910"></xref> or <xref
      target="Safari-Cookie"></xref>), during private browsing, or using
      containerization <xref target="Facebook-Container"></xref>.</t>

      <t>Note that the means to use a sandbox environment and a user interface
      presenting the error page are not covered in this document. By its
      nature, these aspects are implementation specific and best left to the
      application and user interface designers.</t>
-->







      </section>
    <section anchor="IANA" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document requests IANA to register the
      "application/json+structured-dns-error" media type in the "Media Types"
      registry <xref target="IANA-MediaTypes" format="default"/>. This registration
      follows the procedures specified in <xref target="RFC6838" format="default"/>:
      </t>
      <artwork name="" type="" align="left" alt=""><![CDATA[   Type name: application

   Subtype name: json+structured-dns-error

   Required parameters: N/A

   Optional parameters: N/A

   Encoding considerations: as defined in Section 3 of [RFCXXXX].

   Security considerations: See Section 7 of [RFCXXXX].

   Interoperability considerations: N/A

   Published specification: [RFCXXXX]

   Applications that use this media type: Section 3 of [RFCXXXX].

   Fragment identifier considerations: N/A

   Additional information: N/A

   Person & email address to contact for further information: IETF,
      iesg@ietf.org

   Intended usage: COMMON

   Restrictions on usage: none

   Author: See Authors' Addresses section.

   Change controller: IESG

   Provisional registration?  No]]></artwork>
      <t/>
    </section>
    <!--    <section title="Acknowledgements">
</section>
-->

    <section numbered="true" toc="default" removeInRFC="true">
      <name>Changes</name>

      <t>[RFC Editor: remove this section]</t>
      
      <section numbered="false" toc="default">
	<name>Changes from 00 to 01</name>
	<ul>
          <li>Removed support for multiple responsible parties</li>
	  <li>one-character JSON names (to minimize JSON length)</li>
          <li>partially-formed URI converted to fully-formed
	  URI by client (to minimize JSON length)</li>
	</ul>


      </section>
    </section>
    

  </middle>
  <!--  *****BACK MATTER ***** -->

  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6838.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8624.xml"/>

	
      </references>
      <references>
        <name>Informative References</name>

	<reference anchor="IANA-MediaTypes" target="https://www.iana.org/assignments/media-types">
          <front>
            <title>Media Types</title>
            <author fullname="IANA">
              <organization/>
            </author>
            <date/>
          </front>
        </reference>

        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3363.xml"/>
	<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5646.xml"/>
	<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8484.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8499.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8792.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8914.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-dnsoquic.xml"/>


    </references>
    </references>
  </back>
</rfc>
